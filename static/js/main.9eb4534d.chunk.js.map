{"version":3,"sources":["AddNewItemForm.js","TodoListFooter.js","Api/API.js","TodoListTask.js","TodoListTasks.js","TodoListTitle.js","reducer.js","ToDoList.js","serviceWorker.js","App.js","store.js","index.js"],"names":["AddNewItemForm","state","error","tittle","onAddItemClick","newText","setState","props","addItem","onChangeInput","e","newTittle","currentTarget","value","onEnterPress","key","render","classForBorder","className","type","placeholder","onChange","onKeyPress","onClick","React","Component","TodoListFooter","isHidden","onAllFilterClick","changeFilter","todoId","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","instance","axios","withCredentials","baseURL","headers","api","toDolistID","title","post","get","toDoListId","delete","toToListId","taskId","status","put","task","id","TodoListTask","editMode","onIsDoneChanged","newStatus","checked","then","res","changeStatus","data","item","todoListId","onTitleChanged","activateEditMode","deactivateEditMode","changeTitle","deleteTask","isTaskDone","onBlur","autoFocus","TodoListTasks","tasksElements","map","TodoListHeader","changeToDoListTitle","initialState","todolists","newTodoLisId","reducer","action","tl","tasks","todolistsId","allTasks","newTodolist","filter","todo","todolistId","newTask","newFilterValue","isDone","ToDoList","restoreState","loadTask","addTask","taskID","changeTask","obj","deleteTodolist","deleteList","filteredTasks","t","TodoListTitle","this","connect","dispatch","thunk","addTaskAC","addTaskTC","deleteTaskAC","changeTaskAC","changeTaskTC","changeFilterAC","changeStatusAC","allTask","items","loadTaskThunkCreator","Boolean","window","location","hostname","match","App","setToDoLists","addToDoList","todoList","addTodolist","deleteToDoList","todolistID","alert","ConnectedApp","addTodolistAC","deleteTodolistAC","setToDoListsAC","changeToDoListTitleAC","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9eb4534d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass AddNewItemForm extends React.Component {\r\n\r\n    state = {\r\n        error: false,\r\n        tittle: ''\r\n    }\r\n\r\n    onAddItemClick = () => {\r\n        let newText = this.state.tittle;\r\n        if(newText === '')\r\n            this.setState({error: true})\r\n        else{\r\n            this.setState({error: false, tittle: ''});\r\n            this.props.addItem(newText);\r\n        }\r\n    }\r\n\r\n    onChangeInput = (e) => {\r\n        let newTittle = e.currentTarget.value;\r\n        this.setState({\r\n            error: false,\r\n            tittle: newTittle\r\n        })  \r\n    }\r\n\r\n    onEnterPress = (e) => {\r\n        if(e.key === \"Enter\"){\r\n            let newText = this.state.tittle;\r\n            if(newText === '')\r\n                this.setState({error: true})\r\n            else{\r\n                this.setState({error: false, tittle: ''});\r\n                this.props.addItem(newText);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render = () => {\r\n        let classForBorder = this.state.error === true ? 'input is-medium error': \"input is-medium\";\r\n        return (\r\n\r\n                <div className=\"field has-addons\">\r\n                    <div className='control'>\r\n                    <input className={classForBorder} type=\"text\" placeholder={this.props.placeholder}\r\n                           onChange={this.onChangeInput} onKeyPress={this.onEnterPress}\r\n                           value={this.state.tittle}/>\r\n                    </div>\r\n                    <div className='control'>\r\n                    <button className='button is-primary is-medium' onClick={this.onAddItemClick}>Add</button>\r\n                    </div>\r\n                </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;","import React from 'react';\r\n\r\nclass TodoListFooter extends React.Component {\r\n\r\n    state = {\r\n        isHidden: false\r\n    };\r\n\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter(this.props.todoId ,\"All\")\r\n    };\r\n\r\n    onCompletedFilterClick = () => {\r\n        this.props.changeFilter(this.props.todoId ,\"2\")\r\n    };\r\n\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter(this.props.todoId ,\"0\")\r\n    };\r\n\r\n    onShowFiltersClick = () => {\r\n        this.setState({isHidden: true})\r\n    };\r\n\r\n    onHideFiltersClick = () => {\r\n        this.setState({isHidden: false})\r\n    };\r\n\r\n    render = (props) => {\r\n        let classForAll = this.props.filterValue === \"All\" ? \"is-active\" : \"\";\r\n        let classForCompleted = this.props.filterValue === \"2\" ? \"is-active\" : \"\";\r\n        let classForActive = this.props.filterValue === \"0\" ? \"is-active\" : \"\";\r\n\r\n        return (\r\n            <div className=\"tabs is-centered\">\r\n                { !this.state.isHidden && <ul>\r\n                <li onClick={this.onAllFilterClick} className={classForAll}><a>All</a></li>\r\n                <li onClick={this.onCompletedFilterClick} className={classForCompleted}><a>Completed</a></li>\r\n                <li onClick={this.onActiveFilterClick}  className={classForActive}><a>Active</a></li>\r\n                </ul>}\r\n               {/* {!this.state.isHidden && <span onClick={this.onShowFiltersClick}>hide</span> }\r\n                {this.state.isHidden && <span onClick={this.onHideFiltersClick}>show</span>}*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    headers:{\r\n        \"API-KEY\": 'cf1841cd-6d1a-4d5e-ab77-95df9a8ef2a0'\r\n    }\r\n});\r\n\r\nexport const api = {\r\n    createTask(toDolistID,title){\r\n        return instance.post(`todo-lists/${toDolistID}/tasks`,{title})\r\n    },\r\n    addToDoList(title){\r\n        return instance.post('todo-lists',{title})\r\n    },\r\n    getToDoLists(){\r\n        return instance.get('todo-lists')\r\n    },\r\n    deleteToDoList(toDoListId){\r\n        return instance.delete(`todo-lists/{${toDoListId}}`)\r\n    },\r\n    getTasks(toToListId){\r\n        return instance.get(`todo-lists/${toToListId}/tasks`)\r\n    },\r\n    deleteTask(toDoListId,taskId){\r\n        return  instance.delete(`todo-lists/{${toDoListId}}/tasks/{${taskId}}`)\r\n    },\r\n    updateTaskStatus(toDoListId, taskId, title, status){\r\n        return instance.put(`todo-lists/{${toDoListId}}/tasks/{${taskId}}`,{title, status})\r\n    },\r\n    updateTaskTitle(toDoListId, task, title){\r\n        return instance.put(`todo-lists/{${toDoListId}}/tasks/{${task.id}}`, {...task, title})\r\n    },\r\n    updateToDoListTitle(toDoListId, title){\r\n        return instance.put(`/todo-lists/${toDoListId}`, {\r\n            title\r\n        })\r\n    }\r\n};","import React from 'react';\r\nimport {api} from \"./Api/API\";\r\n\r\nclass TodoListTask extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        title: this.props.task.title,\r\n    };\r\n\r\n    onIsDoneChanged = (e) => {\r\n        let newStatus;\r\n        if(e.currentTarget.checked === true)\r\n            newStatus = 2;\r\n        else\r\n            newStatus = 0;\r\n\r\n        api.updateTaskStatus(this.props.todoId, this.props.task.id, this.props.task.title, newStatus)\r\n            .then(res=>{\r\n                this.props.changeStatus(res.data.data.item.todoListId, res.data.data.item.id, res.data.data.item.status);\r\n            });\r\n    };\r\n\r\n    onTitleChanged = (e) => {\r\n        this.setState({title: e.currentTarget.value});\r\n    };\r\n\r\n    activateEditMode = () =>{\r\n        this.setState({editMode: true})\r\n    };\r\n\r\n    deactivateEditMode = () =>{\r\n         /*api.updateTaskTitle(this.props.todoId, this.props.task, this.state.title)\r\n           .then(res=>{\r\n               this.props.changeTitle(res.data.data.item.todoListId , res.data.data.item.id, res.data.data.item);\r\n               this.setState({editMode: false});\r\n           });*/\r\n         this.props.changeTitle(this.props.todoId, this.props.task, this.state.title);\r\n        this.setState({editMode: false});\r\n    };\r\n\r\n    deleteTask = () => {\r\n        api.deleteTask(this.props.todoId, this.props.task.id)\r\n            .then(res=>{\r\n                this.props.deleteTask(this.props.todoId, this.props.task.id)\r\n            });\r\n\r\n    };\r\n\r\n    render = () => {\r\n        let class1 = 'panel-block';\r\n        let class2 = 'is-active';\r\n        let status;\r\n        if(this.props.task.status === 2)\r\n            status = true;\r\n        else\r\n            status = false;\r\n\r\n        let isTaskDone = `${class1} ${status && class2}`;\r\n\r\n        return (\r\n            <div className='panel-block'>\r\n            <a className={isTaskDone}>\r\n                <input type='checkbox' checked={status} onChange={this.onIsDoneChanged}/>\r\n                {this.state.editMode\r\n                ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\r\n                         value={this.state.title}/>\r\n                : <div className='task-text' onClick={this.activateEditMode}> {this.props.task.title}</div>}\r\n            </a>\r\n            <button className='delete' onClick={this.deleteTask}>X</button>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTask;","import React from 'react';\r\nimport TodoListTask from \"./TodoListTask\";\r\n\r\nclass TodoListTasks extends React.Component {\r\n\r\n    render = () => {\r\n        let tasksElements = this.props.task.map(task =>\r\n                 <TodoListTask todoId={this.props.todoId} key={this.props.todoId} task={task}\r\n                              changeTitle={this.props.changeTitle} changeStatus={this.props.changeStatus}\r\n                              deleteTask={this.props.deleteTask}/>\r\n\r\n        );\r\n        return (\r\n            <div className=\"panel\">\r\n                {tasksElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;","import React from 'react';\r\nimport {api} from \"./Api/API\";\r\n\r\nclass TodoListHeader extends React.Component {\r\n\r\n    state ={\r\n        editMode: false,\r\n        title: this.props.title\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        api.updateToDoListTitle(this.props.todoId,this.state.title)\r\n            .then(res=>{\r\n                this.props.changeToDoListTitle(this.props.todoId, this.state.title);\r\n                this.setState({\r\n                    editMode: false\r\n                })\r\n            });\r\n    };\r\n\r\n    onTitleChanged = (e) =>{\r\n        this.setState({title: e.currentTarget.value})\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"todoList-header\">\r\n                {this.state.editMode\r\n                    ? <input onBlur={this.deactivateEditMode} autoFocus={true} onChange={this.onTitleChanged}\r\n                             value={this.state.title}/>\r\n                :<h3 className=\"todoList-header__title\" onClick={this.activateEditMode}>{this.props.title}</h3>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListHeader;","import {api} from \"./Api/API\";\r\n\r\nexport const ADD_TODOLIST = 'reducer/ADD-TODOLIST';\r\nexport const DELETE_TODOLIST = 'DELETE_TODOLIST';\r\nexport const ADD_TASK = 'ADD_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const CHANGE_TASK = 'CHANGE_TASK';\r\nexport const CHANGE_FILTER = 'CHANGE_FILTER';\r\nexport const CHANGE_STATUS = 'CHANGE_STATUS';\r\nexport const SET_TODOLIST = 'SET_TODOLIST';\r\nexport const SET_TASKS = 'SET_TASKS';\r\nexport const CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE';\r\n\r\n\r\nconst initialState = {\r\n    todolists: [],\r\n    newTodoLisId: 2,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl=>({...tl,tasks: []}))\r\n            };\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl=>{\r\n                    if(tl.id !== action.todolistsId)\r\n                        return tl;\r\n                    else{\r\n                        return {...tl, tasks: action.allTasks}\r\n                    }\r\n                })\r\n            };\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodolist],\r\n                newTodoLisId: state.newTodoLisId + 1\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(todo =>{\r\n                    if(todo.id !== action.todolistId)\r\n                        return todo;\r\n                })\r\n            };\r\n        case ADD_TASK:\r\n            return {\r\n                ...state, todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {...todo, tasks: [...todo.tasks, action.newTask]}\r\n                    }\r\n                })\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state, todolists: state.todolists.map(todo => {\r\n                    if(todo.id !== action.todolistId)\r\n                        return todo;\r\n                    else {\r\n                        return {\r\n                            ...todo, tasks: todo.tasks.filter(task =>{\r\n                                if(task.id !== action.taskId)\r\n                                    return todo;\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_TASK:\r\n            return {\r\n                ...state, todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {\r\n                            ...todo, tasks: todo.tasks.map(task => {\r\n                                if (task.id !== action.taskId) {\r\n                                    return task\r\n                                } else {\r\n                                    return {\r\n                                        ...task, title: action.title\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_FILTER:\r\n            return {\r\n                ...state, todolists: state.todolists.map(todo => {\r\n                    if(todo.id !== action.todolistId)\r\n                        return todo;\r\n                    else{\r\n                        return{\r\n                            ...todo, filter: action.newFilterValue\r\n                        }\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_STATUS:\r\n            return {\r\n                ...state, todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {\r\n                            ...todo, tasks: todo.tasks.map(task => {\r\n                                if (task.id !== action.taskId) {\r\n                                    return task\r\n                                } else {\r\n                                    return {\r\n                                        ...task, status: action.isDone\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return {\r\n                ...state, todolists: state.todolists.map(todo => {\r\n                    if(todo.id !== action.todoListId){\r\n                        return todo\r\n                    } else{\r\n                        return{\r\n                            ...todo, title: action.title\r\n                        }\r\n                    }\r\n                })\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nconst changeTaskAC = (todolistId, task, title) => {\r\n  return {type: CHANGE_TASK,\r\n      todolistId,\r\n      taskId: task.id,\r\n      title,\r\n  }\r\n};\r\nexport const changeTaskTC = (todolistId, task, title) =>{\r\n    return (dispatch) => {\r\n        api.updateTaskTitle(todolistId, task, title)\r\n            .then(res => {\r\n                dispatch(changeTaskAC(todolistId, task, title))\r\n            })\r\n    }\r\n};\r\nconst addTaskAC = (todolistId, newTask) => {\r\n  return {type: ADD_TASK,\r\n      newTask,\r\n      todolistId}\r\n};\r\nexport const addTaskTC = (todolistId, newTask) => {\r\n    return (dispatch) => {\r\n        api.createTask(todolistId, newTask)\r\n            .then(res => {\r\n                let newTask = res.data.data.item;\r\n                dispatch(addTaskAC(todolistId, newTask));\r\n            })\r\n    }\r\n}\r\n\r\nexport const deleteTaskAC = (todolistId, taskId) => {\r\n  return {type: DELETE_TASK,\r\n      todolistId,\r\n      taskId}\r\n};\r\nexport const changeFilterAC = (todolistId, filterValue) => {\r\n  return { type: CHANGE_FILTER,\r\n      todolistId,\r\n      newFilterValue: filterValue}\r\n};\r\nexport const changeStatusAC = (todolistId, taskId, isDone) => {\r\n  return { type: CHANGE_STATUS,\r\n      todolistId,\r\n      taskId,\r\n      isDone}\r\n};\r\nexport const addTodolistAC = (newTodolist) => {\r\n  return {\r\n      type: ADD_TODOLIST,\r\n      newTodolist\r\n  }\r\n};\r\nexport const deleteTodolistAC = (todolistId) => {\r\n  return {\r\n      type: DELETE_TODOLIST,\r\n      todolistId\r\n  }\r\n};\r\nexport const setToDoListsAC = (todolists) => {\r\n  return {\r\n      type: SET_TODOLIST,\r\n      todolists\r\n  }\r\n};\r\nconst setTasksAC = (allTasks,todolistsId) => {\r\n  return {\r\n      type: SET_TASKS,\r\n      allTasks,\r\n      todolistsId,\r\n  }\r\n};\r\nexport const loadTaskThunkCreator = (todolistId) =>{\r\n    return (dispatch) => {\r\n        api.getTasks(todolistId)\r\n            .then(res =>{\r\n                let allTask = res.data.items;\r\n                dispatch(setTasksAC(allTask, todolistId))\r\n            })\r\n    }\r\n};\r\nexport const changeToDoListTitleAC = (todoListId, title) => {\r\n  return {\r\n      type: CHANGE_TODOLIST_TITLE,\r\n      todoListId,\r\n      title\r\n  }\r\n};\r\n\r\n\r\nexport default reducer;","import React from 'react';\nimport './App.css';\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport {connect} from \"react-redux\";\nimport {\n    addTaskAC, addTaskTC,\n    changeFilterAC, changeStatusAC,\n    changeTaskAC, changeTaskTC,\n    deleteTaskAC, loadTaskThunkCreator, setTasksAC\n} from \"./reducer\";\nimport {api} from \"./Api/API\";\n\nclass ToDoList extends React.Component {\n\n    componentDidMount(){\n        this.restoreState();\n    }\n\n    restoreState=()=>{\n        /*api.getTasks(this.props.id)\n            .then(res=>{\n                let allTasks = res.data.items;\n                this.props.setTasks(allTasks, this.props.id)\n            })*/\n        this.props.loadTask(this.props.id);\n    };\n\n    addTask = (title) => {\n            /*api.createTask(this.props.id,title)\n                .then(res=>{\n                let newTask = res.data.data.item;\n                this.props.addTask(this.props.id, newTask);\n            })*/\n            this.props.addTask(this.props.id,title)\n    };\n\n    changeFilter = (todoId,newFilterValue) => {\n        this.props.changeFilter(todoId, newFilterValue);\n     };\n\n    changeStatus = (todolistId, taskID, isDone) =>{\n        this.props.changeStatus(todolistId ,taskID, isDone)\n    };\n\n    changeTask = (todolistId, taskId, obj) =>{\n        this.props.changeTask(todolistId, taskId, obj);\n    };\n\n    changeTitle = (todolistId ,task, title) => {\n        this.changeTask(todolistId, task, title)\n    };\n\n    deleteTodolist = () => {\n        api.deleteToDoList(this.props.id)\n            .then(res=>{\n                this.props.deleteList(this.props.id);\n            })\n    };\n\n    render = () => {\n        let {tasks = []} = this.props;\n        let filteredTasks = tasks.filter(t => {\n            switch (this.props.filter) {\n                case \"All\": return true;\n                case \"2\": return t.status;\n                case \"0\": return !t.status;\n                default: return true;\n            }});\n        return (\n            <div className=\"App\">\n                <div className=\"message\">\n                    <div className='message-header'>\n                        <TodoListTitle title={this.props.title} changeToDoListTitle = {this.props.changeToDoListTitle}\n                                       todoId={this.props.id}/>\n                        <button className='delete' onClick={this.deleteTodolist}>X</button>\n                    </div>\n                    <AddNewItemForm addItem={this.addTask} placeholder='Имя новой задачи'/>\n                   <TodoListTasks changeStatus={this.changeStatus} todoId={this.props.id}\n                                  changeTitle={this.changeTitle} task={filteredTasks}\n                                  deleteTask={this.props.deleteTask} />\n\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.props.filter}\n                                    todoId={this.props.id}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTask(todolistId, newTask){\n            let thunk = addTaskTC(todolistId, newTask);\n            dispatch(thunk);\n        },\n        deleteTask: (todolistId, taskId) =>{\n            const action = deleteTaskAC(todolistId, taskId);\n            dispatch(action)\n        },\n        /*changeTask: (todolistId, taskId, newTask) => {\n            const action = changeTaskAC(todolistId, taskId, newTask);\n            dispatch(action);\n        },*/\n        changeTask(todolistId, task, title) {\n            let thunk = changeTaskTC(todolistId, task, title);\n            dispatch(thunk);\n        },\n        changeFilter: (todolistId, filterValue) => {\n            const action = changeFilterAC(todolistId, filterValue);\n            dispatch(action);\n        },\n        changeStatus: (todolistId, taskId, isDone) => {\n            const action = changeStatusAC(todolistId, taskId, isDone);\n            dispatch(action);\n        },\n        loadTask(todolistId) {\n            let thunk = loadTaskThunkCreator(todolistId);\n            dispatch(thunk);\n        }\n    }\n};\n\nexport default connect(null, mapDispatchToProps)(ToDoList);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. ToDoList is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './App.css';\r\nimport ToDoList from \"./ToDoList\";\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTodolistAC, changeToDoListTitleAC, deleteTodolistAC, setToDoListsAC} from \"./reducer\";\r\n\r\nimport {api} from \"./Api/API\";\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount(){\r\n        this.restoreState();\r\n        alert('В силу ограниченности Api, используемого для написания этого приложения, не авторизованные ' +\r\n            'пользователи не могут отправлять запросы на сервер. Что бы протестировать приложение, залогиньтесь на ' +\r\n            'сайте https://social-network.samuraijs.com , используая тестовый аккаунт. Email: free@samuraijs.com ' +\r\n            'Password: free  Тестовый аккаунт имеет очень сильные ограничения на кол-во запросов, поэтому не спамьте запросы.')\r\n    }\r\n\r\n    restoreState = () => {\r\n        api.getToDoLists()\r\n            .then(res => {\r\n                this.props.setToDoLists(res.data);\r\n            })\r\n    };\r\n\r\n    addToDoList = (title) =>{\r\n        api.addToDoList(title)\r\n            .then(res=>{\r\n                let todoList = res.data.data.item;\r\n                this.props.addTodolist(todoList);\r\n            })\r\n    };\r\n\r\n    deleteToDoList = (todolistID) => {\r\n        this.props.deleteTodolist(todolistID);\r\n    };\r\n\r\n    render = () => {\r\n        const todoList = this.props.todolists.map(tl => <ToDoList key={tl.id} id={tl.id}\r\n           title={tl.title} tasks={tl.tasks} deleteList={this.deleteToDoList}\r\n        filter={tl.filter} changeToDoListTitle={this.props.changeToDoListTitle}/>);\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <AddNewItemForm addItem={this.addToDoList} placeholder='Имя новоги списка дел'/>\r\n                </div>\r\n                <div className='main-block'>\r\n                    {todoList}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todolists: state.todolists,\r\n        newTodoLisId: state.newTodoLisId,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addTodolist: (newTodolist) => {\r\n            const action = addTodolistAC(newTodolist);\r\n            dispatch(action)\r\n        },\r\n        deleteTodolist: (todolistId) =>{\r\n           const action = deleteTodolistAC(todolistId);\r\n            dispatch(action)\r\n        },\r\n        setToDoLists: (todolists) =>{\r\n            const action = setToDoListsAC(todolists);\r\n            dispatch(action);\r\n        },\r\n        changeToDoListTitle: (todoListId, title) => {\r\n            const action = changeToDoListTitleAC(todoListId, title)\r\n            dispatch(action);\r\n        }\r\n    }\r\n};\r\n\r\n\r\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\r\nexport default ConnectedApp;","import {applyMiddleware, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ToDoList from './ToDoList';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}